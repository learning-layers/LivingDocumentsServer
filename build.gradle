/*
 *  Code contributed to the Learning Layers project
 *  http://www.learning-layers.eu
 *  Development is partly funded by the FP7 Programme of the European
 *  Commission under Grant Agreement FP7-ICT-318209.
 *  Copyright (c) 2016, Karlsruhe University of Applied Sciences.
 *  For a list of contributors see the AUTHORS file at the top-level directory
 *  of this distribution.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/*
 * ROOT
 */

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

subprojects {
    apply plugin: 'java'

    version = '1.0.0'
    group = 'de.hska.ld'

    ext {
        title = 'LivingDocuments'
        organization = 'Karlsruhe University of Applied Sciences'

        environment = project.hasProperty('env') ? env : 'dev'
        target = project.hasProperty('trg') ? trg : 'jar'
        container = project.hasProperty('cnt') ? cnt : 'tomcat'

        springBootVersion = '1.2.6.RELEASE'
        springVersion = '4.2.4.RELEASE'
        validationApiVersion = '1.1.0.Final'
        apacheCommonsIoVersion = '2.4'
        javaMailVersion = '1.4.7'
        commonsDbcpVersion = '1.4'
        velocityVersion = '1.7'
        velocityToolsVersion = '2.0'
        commonsValidatorVersion = '1.5.0'
        hibernateValidation = '5.2.3.Final'
        h2Version = '1.4.191'
        mySqlVersion = '5.1.38'
        tomcatVersion = '8.0.30'
        hibernateSearch = '5.3.0.Final'
    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (project.container == 'tomcat' && details.requested.group == 'org.apache.tomcat.embed') {
                details.useVersion tomcatVersion
            }
        }
    }

    buildscript {
        repositories {
            maven { url 'http://repo.spring.io/libs-snapshot' }
        }
        dependencies {
            classpath 'org.springframework.boot:spring-boot-gradle-plugin:' + springBootVersion
        }
    }

    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/libs-snapshot' }
        mavenLocal()
        jcenter()
    }

    configurations {
        // Exclude tomcat dependency if using jetty
        if (project.container == 'jetty') {
            compile.exclude module: "spring-boot-starter-tomcat"
        }
    }

    dependencies {
        compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
        // Add necessary dependency if using jetty
        if (project.container == 'jetty') {
            compile "org.springframework.boot:spring-boot-starter-jetty:$springBootVersion"
        }
        compile "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
        compile "org.springframework.boot:spring-boot-starter-security:$springBootVersion"
        compile "org.springframework.boot:spring-boot-starter-websocket:$springBootVersion"
        compile "org.springframework.boot:spring-boot-starter-thymeleaf:$springBootVersion"
        compile 'org.thymeleaf.extras:thymeleaf-extras-springsecurity3:2.1.1.RELEASE'
        compile "org.springframework:spring-context-support:$springVersion"
        compile "org.springframework:spring-messaging:$springVersion"
        compile "javax.validation:validation-api:$validationApiVersion"
        compile "javax.mail:mail:$javaMailVersion"
        compile "commons-validator:commons-validator:$commonsValidatorVersion"
        compile "org.hibernate:hibernate-validator:$hibernateValidation"
        compile "commons-dbcp:commons-dbcp:$commonsDbcpVersion"
        compile "commons-io:commons-io:$apacheCommonsIoVersion"
        compile "org.apache.velocity:velocity:$velocityVersion"
        compile "org.apache.velocity:velocity-tools:$velocityToolsVersion"
        compile "com.h2database:h2:$h2Version"
        compile "org.hibernate:hibernate-search-orm:$hibernateSearch"
        compile "mysql:mysql-connector-java:$mySqlVersion"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate4:2.4.2"
        compile "javax.interceptor:javax.interceptor-api:3.1"
        compile "uk.com.robust-it:cloning:1.9.2"
        compile 'org.apache.httpcomponents:httpclient:4.5'
        compile 'org.apache.httpcomponents:httpmime:4.5'

        // OPEN ID Connect
        compile "org.springframework.security.oauth:spring-security-oauth2:2.0.3.RELEASE"
        compile "org.mitre:openid-connect-client:1.1.9"
        compile "org.apache.httpcomponents:httpclient:4.3.5"

        // Webjar
        compile("org.webjars:jquery:2.1.4")
        compile("org.webjars:underscorejs:1.8.3")
        compile("org.webjars:bootstrap:2.3.2")

        // OPEN ID Connect
        compile "org.springframework.security.oauth:spring-security-oauth2:2.0.3.RELEASE"
        compile "org.mitre:openid-connect-client:1.1.9"
        compile "org.apache.httpcomponents:httpclient:4.3.5"

        // Webjar
        compile("org.webjars:jquery:2.1.4")
        compile("org.webjars:underscorejs:1.8.3")
        compile("org.webjars:bootstrap:2.3.2")

        // Swagger
        //compile "org.springframework.plugin:spring-plugin-metadata:1.2.0.RELEASE"
        compile "io.springfox:springfox-swagger2:2.2.0"
        compile "io.springfox:springfox-swagger-ui:2.2.0"

        // Add the core project as a dependency for each sub project
        if (project.name != 'ld-core') {
            compile project(path: ':ld-core')
        }
        // Test dependencies
        testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    }

    test.scanForTestClasses = false
    test.include('**/*IntegrationTest.class')
    test.exclude('**/*Abstract*.class')
    test.reports.html.enabled = false
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn subprojects*.test
}
