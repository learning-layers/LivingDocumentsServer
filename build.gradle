/*
 * ROOT
 */

subprojects {
    apply plugin: 'java'

    version = '1.0.0'
    group = 'de.hska.ld'

    ext {
        title = 'LivingDocuments'
        organization = 'Karlsruhe University of Applied Sciences'

        environment = project.hasProperty('env') ? env : 'dev'
        target = project.hasProperty('trg') ? trg : 'jar'
        container = project.hasProperty('cnt') ? cnt : 'tomcat'

        springBootVersion = '1.1.4.RELEASE'
        springSecurityLdapVersion = '3.2.1.RELEASE'
        springVersion = '4.0.4.RELEASE'
        validationApiVersion = '1.1.0.Final'
        apacheCommonsIoVersion = '2.4'
        javaMailVersion = '1.4.7'
        commonsDbcpVersion = '1.4'
        velocityVersion = '1.7'
        velocityToolsVersion = '2.0'
        commonsValidatorVersion = '1.4.0'
        hibernateValidation = '5.1.0.Final'
        h2Version = '1.4.178'
        postgresVersion = '9.1-901.jdbc4'
        mySqlVersion = '5.1.30'
        tomcatVersion = '8.0.9'
    }

    /*configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (project.container == 'tomcat' && details.requested.group == 'org.apache.tomcat.embed') {
                details.useVersion tomcatVersion
            }
        }
    }*/

    buildscript {
        repositories {
            maven { url 'http://repo.spring.io/libs-snapshot' }
        }
        dependencies {
            classpath 'org.springframework.boot:spring-boot-gradle-plugin:' + springBootVersion
        }
    }

    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/libs-snapshot' }
        mavenLocal()
    }

    configurations {
        // Exclude tomcat dependency if using jetty
        if (project.container == 'jetty') {
            compile.exclude module: "spring-boot-starter-tomcat"
        }
    }

    dependencies {
        compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
        // Add necessary dependency if using jetty
        if (project.container == 'jetty') {
            compile "org.springframework.boot:spring-boot-starter-jetty:$springBootVersion"
        }
        compile "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
        compile "org.springframework.boot:spring-boot-starter-security:$springBootVersion"
        compile "org.springframework.security:spring-security-ldap:$springSecurityLdapVersion"
        compile "org.springframework:spring-context-support:$springVersion"
        compile "javax.validation:validation-api:$validationApiVersion"
        compile "javax.mail:mail:$javaMailVersion"
        compile "commons-validator:commons-validator:$commonsValidatorVersion"
        compile "org.hibernate:hibernate-validator:$hibernateValidation"
        compile "commons-dbcp:commons-dbcp:$commonsDbcpVersion"
        compile "commons-io:commons-io:$apacheCommonsIoVersion"
        compile "org.apache.velocity:velocity:$velocityVersion"
        compile "org.apache.velocity:velocity-tools:$velocityToolsVersion"
        compile "com.h2database:h2:$h2Version"
        compile "mysql:mysql-connector-java:$mySqlVersion"
        compile "postgresql:postgresql:$postgresVersion"
        // Add the core project as a dependency for each sub project
        if (project.name != 'ld-core') {
            compile project(path: ':ld-core')
        }
        // Test dependencies
        testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    }

    test.scanForTestClasses = false
    test.include('**/*IntegrationTest.class')
    test.exclude('**/*Abstract*.class')
    test.reports.html.enabled = false
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn subprojects*.test
}
